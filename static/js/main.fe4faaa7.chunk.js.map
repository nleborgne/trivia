{"version":3,"sources":["Clock.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Clock","className","this","props","time","React","Component","Home","state","choicesDifficulty","difficulty","questions","answeredQuestions","answers","results","isRandomized","length","setState","qAnswers","getAnswers","timer","setInterval","clearInterval","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","text","replace","e","target","value","question","userInput","answer","checked","result","decodeHTML","correct_answer","newResults","alreadyAnswered","previousAnswers","concat","score","fetch","then","response","json","data","startTimer","currentQuestion","incorrect_answers","push","key","type","name","variant","id","onClick","for","shuffle","choice","toLowerCase","FormGroup","FormLabel","FormControl","as","onChange","changeDifficulty","getQuestions","class","category","checkAnswer","document","getElementsByName","disabled","stopTimer","showResults","correctAnswers","filter","x","i","questionTitle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe4faaa7.chunk.js","sourcesContent":["import React from 'react';\n\nclass Clock extends React.Component {\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <p>{this.props.time}</p>\n      </div>\n    )\n  }\n}\n\nexport default Clock;\n","import React from 'react';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Clock from './Clock';\n\nclass Home extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      choicesDifficulty: ['Any','Easy','Medium','Hard'],\n      difficulty: 'any',\n      questions: null,\n      answeredQuestions: 0,\n      answers: [],\n      results:[],\n      time: 0,\n      isRandomized: false,\n    }\n  }\n\n  componentDidUpdate() {\n    if(!this.state.isRandomized && this.state.questions && this.state.answeredQuestions < this.state.questions.length) {\n      this.setState({\n        qAnswers: this.getAnswers(),\n        isRandomized:true,\n      })\n    }\n  }\n\n  startTimer() {\n\n    this.timer = setInterval(() => this.setState({\n      time: this.state.time + 1\n    }), 1000)\n\n    }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    };\n\n  return array;\n}\n\n  decodeHTML(text) {\n    return (\n      text\n      .replace(/&quot;/g,'\"')\n      .replace(/&#039;/g,\"'\")\n      .replace(/&ldquo;/g,\"“\")\n      .replace(/&rdquo;/g,\"”\")\n      .replace(/&amp;/g,'&')\n      .replace(/&eacute;/g,'é')\n      .replace(/&rsquo;/g, \"'\")\n      .replace(/&ocirc;/g, 'ô')\n      .replace(/&shy;/g,\"-\")\n    )\n  }\n\n  changeDifficulty(e) {\n    this.setState({\n      difficulty: e.target.value,\n    })\n  }\n\n  checkAnswer(e, question) {\n    let userInput;\n    for (let answer of e) {\n      if (answer.checked) {\n        userInput = answer.value;\n      }\n    }\n\n    let result = null;\n    (this.decodeHTML(userInput) === this.decodeHTML(question.correct_answer)) ? result = true : result = false;\n    let newResults = this.state.results;\n    let alreadyAnswered = this.state.answeredQuestions;\n    let previousAnswers = this.state.answers;\n    newResults = newResults.concat(result);\n    previousAnswers = previousAnswers.concat(userInput);\n    this.setState({\n      results: newResults,\n      answeredQuestions: alreadyAnswered + 1,\n      answers: previousAnswers,\n      isRandomized: false,\n      score: 0,\n      answer: '',\n    });\n  }\n\n  getQuestions() {\n    let difficulty = '';\n    (this.state.difficulty === 'any') ? difficulty = '' : difficulty = '&difficulty='+this.state.difficulty ;\n    let url = 'https://opentdb.com/api.php?amount=10&type=multiple'+difficulty;\n    fetch(url)\n    .then((response) => {\n      response.json().then((data) => {\n        this.setState({\n          questions:data.results,\n        });\n      });\n    }, this.startTimer());\n  }\n\n\n  getAnswers() {\n    let currentIndex = this.state.answeredQuestions;\n    let currentQuestion = this.state.questions[currentIndex];\n    let answers = [];\n    for (let answer of currentQuestion.incorrect_answers) {\n      answers.push(<div key={this.decodeHTML(answer)} className=\"radiobtn\"><input type=\"radio\" className=\"mr-3 mb-3\" key={this.decodeHTML(answer)} name={currentQuestion.question} variant=\"secondary\" id={this.decodeHTML(answer)} value={this.decodeHTML(answer)} onClick={(e) => this.setState({answer:e.target.value})}/><label for={this.decodeHTML(answer)}>{this.decodeHTML(answer)}</label></div>);\n    }\n    answers.push(<div key={this.decodeHTML(currentQuestion.correct_answer)} className=\"radiobtn\"><input type=\"radio\" className=\"mr-3 mb-3\" key={this.decodeHTML(currentQuestion.correct_answer)} name={currentQuestion.question} variant=\"secondary\" id={this.decodeHTML(currentQuestion.correct_answer)} value={this.decodeHTML(currentQuestion.correct_answer)} onClick={(e) => this.setState({answer:e.target.value})} /><label for={this.decodeHTML(currentQuestion.correct_answer)}>{this.decodeHTML(currentQuestion.correct_answer)}</label></div>);\n\n    if(!this.state.isRandomized) {\n      answers = this.shuffle(answers);\n\n      this.setState({\n        isRandomized: true,\n      })\n    }\n\n    return answers;\n  }\n\n  render() {\n    let choicesDifficulty = [];\n    for (let choice of this.state.choicesDifficulty) {\n      choicesDifficulty.push(<option key={choice} value={choice.toLowerCase()}>{choice}</option>);\n    }\n    if(this.state.questions === null) {\n      return(\n      <div className=\"App\">\n        <header className=\"App-header mt-5\">\n          <div className=\"text-center\">\n            <FormGroup className=\"col-sm-10 col-lg-3 mx-auto mt-5 shadow p-4\" id=\"container\">\n              <FormLabel className=\"text-dark\">Select difficulty</FormLabel>\n              <FormControl as=\"select\" onChange={ (e) => this.changeDifficulty(e)}>\n                {choicesDifficulty}\n              </FormControl>\n              <button className=\"button mt-5 px-5 rounded-pill py-2\" onClick={ () => this.getQuestions()}>Start</button>\n            </FormGroup>\n          </div>\n        </header>\n      </div>\n    )\n  } else if(this.state.results.length < this.state.questions.length){\n\n    let currentQuestion = this.state.questions[this.state.answeredQuestions];\n\n      return (\n        <div class=\"mt-5 col-sm-12 col-lg-6 mx-auto p-4 text-center shadow \" id=\"container\">\n          <div class=\"row mb-4\">\n            <h4 class=\"float-lg-left mr-auto text-center mx-auto\">Question : {this.state.answeredQuestions + 1} / 10 </h4>\n            <h4 class=\"float-lg-right ml-auto text-center mx-auto\">Category : {this.decodeHTML(currentQuestion.category)}</h4>\n          </div>\n          <h4 className=\"text-center\">{this.decodeHTML(currentQuestion.question)}</h4>\n          <div className=\"mx-auto text-center mt-3 col-sm-12 col-lg-6\">{this.state.qAnswers}</div>\n          <button className=\"button mt-5 px-5 rounded-pill py-2\" onClick={ () => this.checkAnswer(document.getElementsByName(currentQuestion.question), currentQuestion) } disabled={!this.state.answer}><i class=\"fas fa-angle-right\"></i>&nbsp;Next</button>\n          <Clock time={this.state.time} />\n        </div>\n      )\n    } else {\n      this.stopTimer();\n      let showResults = [];\n      let correctAnswers = this.state.results.filter(x => x === true).length;\n\n      for (let i = 0; i < this.state.questions.length; i++) {\n        let questionTitle = this.decodeHTML(this.state.questions[i].question);\n        if(this.state.results[i] === true) {\n          let answer = this.decodeHTML(this.state.questions[i].correct_answer);\n          showResults.push(<div><h4 class=\"\">{questionTitle}</h4><p className=\"text-success\">Correct</p><p className=\"\">Answer : {this.decodeHTML(answer)}</p></div>);\n        } else {\n          let answer = this.decodeHTML(this.state.questions[i].correct_answer);\n          showResults.push(<div><h4 class=\"\">{questionTitle}</h4><p className=\"text-danger\">Incorrect</p><p class=\"\">Your answer : {this.decodeHTML(this.state.answers[i])}</p><p className=\"\">Answer : {this.decodeHTML(answer)}</p></div>);\n        }\n      }\n\n      return(\n        <div className=\"mt-5 text-center\">\n          <div id=\"container\" className=\"col-sm-12 col-lg-4 py-3 mx-auto\">\n            <p>YOUR SCORE</p>\n            <p class=\"score\">{correctAnswers}</p>\n            <p>Total questions : {this.state.questions.length}</p>\n            <p>Correct answers : {correctAnswers}</p>\n            <p>Time : {this.state.time} seconds</p>\n          </div>\n          <div id=\"container\" className=\"my-5 col-sm-12 col-lg-4 mx-auto py-4\">\n            {showResults}\n          </div>\n        </div>\n      )\n    }\n\n  };\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './Home';\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Home/>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}